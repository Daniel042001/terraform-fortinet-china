Content-Type: multipart/mixed; boundary="==AWS=="
MIME-Version: 1.0

--==AWS==
%{ if licenseTypeFgt == "byol" }
--==AWS==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="license"

${file(licenseFile)}
%{ endif }

--==AWS==
Content-Type: text/x-shellscript; charset="us-ascii"
MIME-Version: 1.0

config system global
  set hostname ${fgtConfHostname}
  set admin-sport ${portFgtHttps}
  set timezone 55
  set admintimeout 120
end
config system interface
  edit port1
    set alias MGMT
    set role wan
    set mode dhcp
    set allowaccess ping https ssh fgfm 
    set type physical
    set mtu-override enable
    set mtu 9001
  next
  edit port2
    set alias GWLB
    set role lan
    set mode dhcp
    set allowaccess ping https ssh fgfm probe-response
    set type physical
    set defaultgw disable
    set mtu-override enable
    set mtu 9001
  next
end
config system probe-response
  set mode http-probe
  set port 8008
end
config system global
%{ if length(regexall("7.[2|4].[0-9][0-9]?", versionFgt)) == 0 ~}
  set vdom-mode split-vdom
%{ endif ~}
%{ if length(regexall("7.[2|4].[0-9][0-9]?", versionFgt)) > 0 ~}
  set vdom-mode multi-vdom
%{ endif ~}
end
%{ if length(regexall("7.[2|4].[0-9][0-9]?", versionFgt)) > 0 ~}
config vdom
  edit root
    config system settings
      set vdom-type admin
    end
  next
  edit FG-traffic
  next
end
%{ endif ~}
config global
  config system interface
    edit port2
      set vdom FG-traffic
    next
  end
end
config vdom
  edit FG-traffic
    config system geneve
      edit "awsgeneve1"
        set interface "port2"
        set type ppp
        set remote-ip ${ipAddrGwlbAz1}
      next
%{ if enableAz2 == true }
      edit "awsgeneve2"
        set interface "port2"
        set type ppp
        set remote-ip ${ipAddrGwlbAz2}
      next
%{ endif }
%{ if enableAz3 == true }
      edit "awsgeneve3"
        set interface "port2"
        set type ppp
        set remote-ip ${ipAddrGwlbAz3}
      next
%{ endif }
    end
    config router policy
      edit 0
        set input-device "awsgeneve1"
        set output-device "awsgeneve1"
      next
%{ if enableAz2 == true }
      edit 0
        set input-device "awsgeneve2"
        set output-device "awsgeneve2"
      next
%{ endif }
%{ if enableAz3 == true }
      edit 0
        set input-device "awsgeneve3"
        set output-device "awsgeneve3"
      next
%{ endif }
    end
    config system zone
      edit aws-geneve
%{ if numberOfAz == 1 }
        set interface awsgeneve1
%{ endif }
%{ if numberOfAz == 2 }
        set interface awsgeneve1 awsgeneve2
%{ endif }
%{ if numberOfAz == 3 }
        set interface awsgeneve1 awsgeneve2 awsgeneve3
%{ endif }
      next
    end
    config router static
      edit 0
        set device "awsgeneve1"
      next
%{ if enableAz2 == true }
      edit 0
        set device "awsgeneve2"
      next
%{ endif }
%{ if enableAz3 == true }
      edit 0
        set device "awsgeneve3"
      next
%{ endif }
    end
    config firewall policy
      edit 0
        set name "awsgeneve"
        set srcintf "aws-geneve"
        set dstintf "aws-geneve"
        set srcaddr "all"
        set dstaddr "all"
        set action accept
        set schedule "always"
        set service "ALL"
        set utm-status enable
        set ssl-ssh-profile "certificate-inspection"
        set av-profile "g-default"
        set ips-sensor "g-default"
        set application-list "g-default"
        set logtraffic all
      next
    end
  next
end
config global
  config system auto-scale
    set status enable
%{ if enablePrimary == true }
    set role primary
    set role master
%{ endif }
%{ if enablePrimary == false }
    set primary-ip ${ipAddrClusterPrimary}
    set master-ip ${ipAddrClusterPrimary}
%{ endif }
    set sync-interface port1
    set psksecret ${asgFgtClusterPSK}
  end
end


--==AWS==--
